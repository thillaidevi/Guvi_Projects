from project_orangehrm_playwright.utils.locators import ADMIN_LOCATORS
from playwright.sync_api import Page, expect
from project_orangehrm_playwright.utils.logger import get_logger
from project_orangehrm_playwright.utils.screenshots import capture_screenshot
from datetime import datetime
import time


class AdminPage:
    """
    Page object for Admin module.
    Handles login, employee creation, and user creation flows.
    """

    def __init__(self, page, logger=None):
        self.page = page
        self.logger = logger or get_logger()

    def login_as_admin(self):
        """Login using admin credentials."""
        self.page.goto("https://opensource-demo.orangehrmlive.com/")
        self.page.fill(ADMIN_LOCATORS["username_input"], "Admin")
        self.page.fill(ADMIN_LOCATORS["password_input"], "admin123")
        self.page.click(ADMIN_LOCATORS["login_button"])
        self.page.wait_for_selector(ADMIN_LOCATORS["dashboard_marker"])
        self.logger.info("[✓] Logged in as Admin")

    def click_add_user_button(self):
        try:
            self.logger.info("👤 Navigating to System Users and clicking Add")

            # Confirm navigation via URL
            assert "admin/viewSystemUsers" in self.page.url, "❌ Not on System Users page"

            # Wait for any h6 to appear
            self.page.wait_for_selector("h6", timeout=10000)

            # Filter h6 headers by exact text 'Admin'
            header_locator = self.page.locator("h6").filter(has_text="Admin")
            expect(header_locator).to_have_count(1)
            expect(header_locator).to_be_visible(timeout=5000)

            # Locate Add button using role-based locator
            add_button = self.page.get_by_role("button", name="Add")
            expect(add_button).to_be_enabled(timeout=5000)

            # Scroll into view and click
            add_button.scroll_into_view_if_needed()
            add_button.click()

            self.logger.info("✅ Add User form opened successfully")

        except Exception as e:
            try:
                headers = self.page.locator("h6")
                self.logger.debug(f"All h6 headers: {headers.all_text_contents()}")
                self.logger.debug(f"Current URL: {self.page.url}")
            except Exception as inner:
                self.logger.debug(f"Header debug failed: {inner}")

            capture_screenshot(self.page, "click_add_user_failed.png")
            self.logger.error(f"[✗] Failed to click Add button in System Users: {e}")
            raise

    def fill_unique_username_and_save(self, base_username, max_attempts=5):
        username_input = self.page.locator("input[autocomplete='off']").nth(0)

        for i in range(max_attempts):
            candidate = f"{base_username}{i}" if i > 0 else base_username
            username_input.clear()
            username_input.fill(candidate)
            self.page.wait_for_timeout(500)

            warning = self.page.locator("span:has-text('Already exists')")
            if warning.is_visible():
                self.logger.warning(f"⚠️ Username '{candidate}' already exists — trying next")
                continue

            # Try clicking Save
            save_button = self.page.locator("button:has-text('Save')")
            expect(save_button).to_be_enabled(timeout=5000)
            save_button.click()
            self.logger.info(f"💾 Save clicked with username: {candidate}")

            # Wait for redirect
            try:
                self.page.wait_for_url("**/viewSystemUsers", timeout=10000)
                expect(self.page.locator("h6:has-text('System Users')")).to_be_visible(timeout=10000)
                self.logger.info(f"✅ User '{candidate}' created successfully")
                capture_screenshot(self.page, "user_creation_success.png")
                return candidate
            except Exception:
                self.logger.warning(f"⚠️ Save failed with username '{candidate}' — retrying")

        raise Exception("❌ Could not create user after multiple attempts")

    def create_user_save(self, username, password, confirm_password, role, employee_name, status):
        self.logger.info(f"🚨 Starting user creation for: {username}")

        try:
            # Wait for Add User form
            self.page.wait_for_selector("h6:has-text('Add User')", timeout=10000)

            # Select Role and Status
            self.select_dropdown_option(role, dropdown_index=0)
            self.select_dropdown_option(status, dropdown_index=1)

            # Fill Employee Name
            emp_input = self.page.locator("input[placeholder='Type for hints...']")
            expect(emp_input).to_be_visible(timeout=5000)
            emp_input.fill(employee_name)
            self.page.wait_for_selector(f"div[role='option']:has-text('{employee_name}')", timeout=3000)
            self.page.locator(f"div[role='option']:has-text('{employee_name}')").first.click()

            # Fill Username with retry if "Already exists"
            username_input = self.page.locator("input[autocomplete='off']").nth(0)
            expect(username_input).to_be_visible(timeout=5000)

            for attempt in range(3):
                username_input.fill("")
                self.page.wait_for_timeout(300)
                username_input.fill(username)
                self.page.wait_for_timeout(800)

                warning = self.page.locator("span:has-text('Already exists')")
                if warning.is_visible():
                    self.logger.warning(f"⚠️ Username '{username}' already exists — retrying")
                    unique_suffix = str(int(time.time()))[-4:]
                    username = f"{username}{unique_suffix}"
                else:
                    self.logger.info(f"✅ Username accepted: {username}")
                    break
            else:
                self.logger.error(f"❌ Username retry failed — warning still present for '{username}'")
                capture_screenshot(self.page, f"username_blocked_{username}.png")
                raise Exception("Username retry exhausted")

             # Fill Passwords
            password_input = self.page.locator("input[type='password']").nth(0)
            confirm_input = self.page.locator("input[type='password']").nth(1)
            expect(password_input).to_be_visible(timeout=5000)
            expect(confirm_input).to_be_visible(timeout=5000)
            password_input.fill(password)
            confirm_input.fill(confirm_password)

            # Pre-save validation
            validation_warnings = self.page.locator("span.oxd-input-field-error")
            if validation_warnings.count() > 0:
                for i in range(validation_warnings.count()):
                    warning_text = validation_warnings.nth(i).inner_text()
                    self.logger.error(f"🚫 Validation warning: {warning_text}")
                capture_screenshot(self.page, f"validation_block_{username}.png")
                raise Exception("Form blocked by validation warning")

            required_inputs = self.page.locator("input[required]")
            for i in range(required_inputs.count()):
                input_field = required_inputs.nth(i)
                value = input_field.input_value()
                label = input_field.get_attribute("aria-label") or input_field.get_attribute(
                    "placeholder") or f"Field {i}"
                if not value.strip():
                    self.logger.error(f"🚫 Required field '{label}' is empty")
                    capture_screenshot(self.page, f"missing_field_{username}.png")
                    raise Exception(f"Required field '{label}' missing")

            # Save
            save_button = self.page.locator("button[type='submit']", has_text="Save")
            expect(save_button).to_be_visible(timeout=5000)
            assert save_button.is_enabled(), "❌ Save button is disabled — form may be incomplete"
            save_button.click()
            self.logger.info(f"💾 Save clicked for username: {username}")

            # Wait for confirmation
            for attempt in range(10):
                current_url = self.page.url
                toast_visible = self.page.locator("div.oxd-toast").filter(has_text="Successfully Saved").is_visible()
                table_header_visible = self.page.locator("h5.oxd-table-filter-title").is_visible()
                if "viewSystemUsers" in current_url or toast_visible or table_header_visible:
                    self.logger.info("✅ Post-save confirmation detected")
                    break
                else:
                    self.logger.warning(f"⏳ Waiting for confirmation... attempt {attempt + 1}")
                    self.page.wait_for_timeout(1000)
            else:
                try:
                    self.page.wait_for_url("**/viewSystemUsers", timeout=3000)
                    self.logger.info("✅ Final fallback: Redirect confirmed")
                except:
                    self.logger.error("❌ Redirect or confirmation not detected after Save")
                    capture_screenshot(self.page, f"user_creation_failed_{username}.png")
                    with open(f"logs/user_creation_dom_dump_{username}.html", "w", encoding="utf-8") as f:
                        f.write(self.page.content())
                    raise Exception("❌ Redirect to System Users page failed after Save")

            # Final verification: confirm user appears in table
            try:
                self.search_user_by_filters(username, role, employee_name, status)
                result_row = self.page.locator(f"div.oxd-table-cell:has-text('{username}')")
                if result_row.count() == 0 or not result_row.first.is_visible():
                    self.logger.error(f"❌ User '{username}' not found in System Users table after Save")
                    capture_screenshot(self.page, f"user_missing_post_save_{username}.png")
                    raise Exception("User creation failed silently — not present in table")
                else:
                    self.logger.info(f"✅ User '{username}' successfully created and visible in table")
                    capture_screenshot(self.page, f"user_created_successfully_{username}.png")
            except Exception as e:
                self.logger.error(f"🔥 Post-save verification failed: {e}")
                capture_screenshot(self.page, f"post_save_verification_error_{username}.png")
                raise

            return username

        except Exception as e:
            self.logger.error(f"🔥 User creation failed: {e}")
            capture_screenshot(self.page,
                               f"user_creation_fail_{username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
            raise

    def select_dropdown_option(self, option_text: str, dropdown_index: int = 0):
        self.logger.info(f"🧭 Selecting dropdown option: {option_text}")

        try:
            dropdowns = self.page.locator("div.oxd-select-wrapper")
            expect(dropdowns.nth(dropdown_index)).to_be_visible(timeout=5000)
            dropdowns.nth(dropdown_index).scroll_into_view_if_needed()
            dropdowns.nth(dropdown_index).click()

            # Wait for listbox and select option
            self.page.wait_for_selector("div[role='listbox']", timeout=3000)
            option = self.page.locator(f"div[role='listbox'] div[role='option']:has-text('{option_text}')")
            expect(option.first).to_be_visible(timeout=3000)
            option.first.click()

            self.logger.info(f"✅ Selected: {option_text}")

        except Exception as e:
            capture_screenshot(self.page, f"dropdown_failed_{option_text}.png")
            self.logger.error(f"❌ Dropdown selection failed for '{option_text}': {e}")
            raise

    def search_user_by_filters(self, username, role, employee_name, status):
        self.logger.info(f"🔍 Searching for user: {username}")

        try:
            # 🛡️ Ensure System Users page and filter form are fully loaded
            try:
                header = self.page.locator("h5.oxd-table-filter-title", has_text="System Users")
                expect(header).to_be_visible(timeout=10000)
                self.logger.info("✅ System Users page header detected")

                filter_form = self.page.locator("form.oxd-form")
                expect(filter_form).to_be_visible(timeout=8000)
                self.page.wait_for_timeout(500)

                # 🚫 Block Enter key and native form submit
                self.page.evaluate("""
                    document.querySelectorAll('form.oxd-form input').forEach(input => {
                        input.addEventListener('keydown', e => {
                            if (e.key === 'Enter') e.preventDefault();
                        });
                    });
                    const form = document.querySelector('form.oxd-form');
                    if (form) {
                        form.addEventListener('submit', e => e.preventDefault());
                    }
                """)
            except Exception:
                self.logger.warning("⚠️ Header or filter form not found — trying fallback input wait")
                fallback_input = self.page.locator("input[placeholder='Username']")
                expect(fallback_input).to_be_visible(timeout=8000)

            # 🎚️ Select Role
            self.select_dropdown_option(role, dropdown_index=0)
            self.page.wait_for_timeout(500)

            # 📌 Select Status
            self.select_dropdown_option(status, dropdown_index=1)
            self.page.wait_for_timeout(500)

            # 👤 Fill and select Employee Name with retry
            emp_input = self.page.locator("input[placeholder='Type for hints...']")
            expect(emp_input).to_be_visible(timeout=5000)
            emp_input.click()
            self.page.wait_for_timeout(300)
            emp_input.fill(employee_name)
            self.page.wait_for_timeout(800)

            for attempt in range(3):
                emp_options = self.page.locator("div[role='option']").filter(has_text=employee_name)
                if emp_options.first.is_visible():
                    emp_options.first.click()
                    self.logger.info(f"✅ Employee name selected: {employee_name}")
                    break
                else:
                    self.logger.warning(f"⏳ Retry {attempt + 1}: Employee option not visible yet")
                    self.page.wait_for_timeout(1000)
            else:
                self.logger.error(f"❌ Employee name '{employee_name}' not found in dropdown")
                capture_screenshot(self.page, f"employee_dropdown_failed_{employee_name}.png")
                raise Exception("Employee dropdown selection failed")

            # 🧾 Fill Username input (optional, resilient to DOM drift)
            username_input = None
            for attempt in range(3):
                try:
                    self.page.wait_for_timeout(800)
                    input_by_class = self.page.locator("form.oxd-form input.oxd-input.oxd-input--active").nth(0)
                    expect(input_by_class).to_be_visible(timeout=3000)
                    username_input = input_by_class
                    self.logger.info("✅ Username input found via class-based locator")
                    break
                except Exception as class_error:
                    self.logger.warning(f"⚠️ Class-based locator failed: {class_error}")
                    self.page.wait_for_timeout(500)
                    try:
                        input_by_placeholder = self.page.locator("input[placeholder='Username']")
                        expect(input_by_placeholder).to_be_visible(timeout=3000)
                        username_input = input_by_placeholder
                        self.logger.info("✅ Username input found via placeholder locator")
                        break
                    except Exception as placeholder_error:
                        self.logger.warning(f"⚠️ Placeholder-based locator failed: {placeholder_error}")
                        self.page.wait_for_timeout(500)
            else:
                self.logger.warning("⚠️ Username input not found after retries — skipping username entry")
                capture_screenshot(self.page, f"username_input_not_visible_{username}.png")

            if username_input:
                try:
                    username_input.click(force=True)
                    self.page.wait_for_timeout(300)
                    username_input.type(username, delay=100, force=True)
                    typed_username = username_input.input_value()
                    if typed_username.strip() != username:
                        self.logger.warning(f"⚠️ Username not typed correctly: '{typed_username}' — continuing anyway")
                        capture_screenshot(self.page, f"username_typing_skipped_{username}.png")
                    else:
                        self.logger.info(f"📝 Username typed: {username}")
                except Exception as typing_error:
                    self.logger.warning(f"⚠️ Username typing failed: {typing_error}")
                    capture_screenshot(self.page, f"username_typing_failed_{username}.png")

            # 🔎 Click Search
            search_button = self.page.locator("button:has-text('Search')")
            expect(search_button).to_be_visible(timeout=5000)
            expect(search_button).to_be_enabled(timeout=5000)
            search_button.scroll_into_view_if_needed()
            self.page.wait_for_timeout(1000)
            search_button.click(force=True)
            self.logger.info("🔍 Search triggered with force click")

            # 📋 Validate results table loaded
            results_table = self.page.locator("div.oxd-table-body")
            expect(results_table).to_be_visible(timeout=5000)
            self.logger.info("📊 Search results table loaded successfully")

            # ✅ Validate first row contents
            row = self.page.locator("div.oxd-table-body > div.oxd-table-card").first

            actual_username = row.locator("div.oxd-table-cell").nth(1).text_content().strip()
            actual_role = row.locator("div.oxd-table-cell").nth(2).text_content().strip()
            actual_emp_name = row.locator("div.oxd-table-cell").nth(3).text_content().strip()
            actual_status = row.locator("div.oxd-table-cell").nth(4).text_content().strip()

            self.logger.info(
                f"🔍 Row values: username='{actual_username}', role='{actual_role}', employee='{actual_emp_name}', status='{actual_status}'")

            if not actual_username.startswith("testuser"):
                raise AssertionError(
                    f"❌ Username mismatch: expected prefix 'testuser', got '{actual_username}'"
                )
            self.logger.info(f"🎯 Username validation passed: '{actual_username}' begins with 'testuser' — dynamic match confirmed")

            assert actual_role == "ESS", f"Expected role 'ESS', got '{actual_role}'"
            assert actual_emp_name == "Thillai Devi K", f"Expected employee name 'Thillai Devi K', got '{actual_emp_name}'"
            assert actual_status == "Enabled", f"Expected status 'Enabled', got '{actual_status}'"

        except Exception as e:
            self.logger.error(f"❌ Search failed: {e}")
            capture_screenshot(self.page, f"search_user_failed_{username}.png")
            raise

    def fill_user_filters(self, username: str, role: str, employee_name: str, status: str):
        """
        Fills the System Users filter form with provided values.
        Should be called once before triggering search.
        """
        self.logger.info(
            f"🧾 Filling filters: username='{username}', role='{role}', employee='{employee_name}', status='{status}'")

        # Ensure form is visible
        filter_form = self.page.locator("form.oxd-form")
        expect(filter_form).to_be_visible(timeout=8000)

        # Block native submit
        self.page.evaluate("""
            document.querySelectorAll('form.oxd-form input').forEach(input => {
                input.addEventListener('keydown', e => {
                    if (e.key === 'Enter') e.preventDefault();
                });
            });
            const form = document.querySelector('form.oxd-form');
            if (form) {
                form.addEventListener('submit', e => e.preventDefault());
            }
        """)

        # Fill Username
        username_input = self.page.locator("input[placeholder='Username']")
        expect(username_input).to_be_visible(timeout=5000)
        username_input.fill(username)
        self.logger.info(f"📝 Username entered: {username}")

        # Select Role
        self.select_dropdown_option(role, dropdown_index=0)
        self.page.wait_for_timeout(300)

        # Select Status
        self.select_dropdown_option(status, dropdown_index=1)
        self.page.wait_for_timeout(300)

        # Fill Employee Name
        emp_input = self.page.locator("input[placeholder='Type for hints...']")
        expect(emp_input).to_be_visible(timeout=5000)
        emp_input.fill(employee_name)
        self.page.wait_for_timeout(800)

        emp_options = self.page.locator("div[role='option']").filter(has_text=employee_name)
        if emp_options.first.is_visible():
            emp_options.first.click()
            self.logger.info(f"✅ Employee name selected: {employee_name}")
        else:
            self.logger.error(f"❌ Employee name '{employee_name}' not found in dropdown")
            capture_screenshot(self.page, f"employee_dropdown_failed_{employee_name}.png")
            raise Exception("Employee dropdown selection failed")

    def click_search_and_validate_table(self):
        """
        Clicks the Search button and waits for the results table to load.
        """
        search_button = self.page.locator("button:has-text('Search')")
        expect(search_button).to_be_visible(timeout=5000)
        expect(search_button).to_be_enabled(timeout=5000)
        search_button.scroll_into_view_if_needed()
        self.page.wait_for_timeout(1000)
        search_button.click(force=True)
        self.logger.info("🔍 Search triggered")

        results_table = self.page.locator("div.oxd-table-body")
        expect(results_table).to_be_visible(timeout=5000)
        self.logger.info("📊 Results table loaded")

    def assert_user_row(self, expected: dict):
        """
        Asserts that the first row in the results table matches expected values.
        Username is matched using startswith; other fields are matched exactly.
        Expected keys: username_prefix, role, employee_name, status
        """
        self.logger.info(f"🔍 Asserting user row matches: {expected}")

        try:
            row = self.page.locator("div.oxd-table-body > div.oxd-table-card").first
            expect(row).to_be_visible(timeout=5000)

            actual = {
                "username": row.locator("div.oxd-table-cell").nth(1).text_content().strip(),
                "role": row.locator("div.oxd-table-cell").nth(2).text_content().strip(),
                "employee_name": row.locator("div.oxd-table-cell").nth(3).text_content().strip(),
                "status": row.locator("div.oxd-table-cell").nth(4).text_content().strip()
            }

            # ✅ Username startswith check
            if not actual["username"].startswith(expected["username_prefix"]):
                raise AssertionError(
                    f"❌ Username mismatch: expected prefix '{expected['username_prefix']}', got '{actual['username']}'"
                )
            self.logger.info(
                f"✅ Username '{actual['username']}' starts with '{expected['username_prefix']}' — dynamic suffix accepted")

            # ✅ Exact match for other fields
            for key in ["role", "employee_name", "status"]:
                if actual[key] != expected[key]:
                    raise AssertionError(
                        f"❌ Mismatch in '{key}': expected '{expected[key]}', got '{actual[key]}'"
                    )
                self.logger.info(f"✅ {key} matched: {actual[key]}")

            self.logger.info("🎯 Row assertion passed")
            capture_screenshot(self.page, f"user_row_assertion_passed_{actual['username']}.png")

        except Exception as e:
            self.logger.error(f"❌ Row assertion failed: {e}")
            capture_screenshot(self.page, f"user_row_assertion_failed_{expected['username_prefix']}.png")
            raise

    def validate_user_in_table(self):
        self.logger.info("🔍 Validating presence of user: testuser")

        try:
            # 🛡️ Wait for System Users page and filter form
            header = self.page.locator("h5.oxd-table-filter-title", has_text="System Users")
            expect(header).to_be_visible(timeout=10000)
            filter_form = self.page.locator("form.oxd-form")
            expect(filter_form).to_be_visible(timeout=8000)
            self.page.wait_for_timeout(500)

            # 🚫 Block native form submit before any typing
            self.page.evaluate("""
                document.querySelector('form.oxd-form').addEventListener('submit', e => {
                    e.preventDefault();
                });
            """)

            # 🧾 Fill Username
            username_label = self.page.locator("label").filter(has_text="Username")
            username_input = username_label.locator("xpath=following-sibling::div//input")
            expect(username_input).to_be_visible(timeout=5000)
            username_input.fill("")
            self.page.wait_for_timeout(300)
            username_input.fill("testuser")
            self.logger.info("📝 Username entered: testuser")

            # 🎚️ Select Role: ESS
            self.select_dropdown_option("ESS", dropdown_index=0)
            self.page.wait_for_timeout(300)

            # 👤 Select Employee Name: Thillai Devi K
            emp_input = filter_form.locator("input[placeholder='Type for hints...']")
            expect(emp_input).to_be_visible(timeout=5000)
            emp_input.fill("")
            self.page.wait_for_timeout(300)
            emp_input.fill("Thillai Devi K")
            self.page.wait_for_timeout(500)

            emp_options = self.page.locator("div[role='option']").filter(has_text="Thillai Devi K")
            if emp_options.count() > 0:
                emp_options.first.click()
                self.logger.info("✅ Employee name selected: Thillai Devi K")
            else:
                self.logger.warning("⚠️ No match found for employee name 'Thillai Devi K'")

            # 📌 Select Status: Enabled
            self.select_dropdown_option("Enabled", dropdown_index=1)
            self.page.wait_for_timeout(300)

            # 🔎 Click Search
            search_button = self.page.locator("button:has-text('Search')")
            expect(search_button).to_be_visible(timeout=5000)
            expect(search_button).to_be_enabled(timeout=5000)
            search_button.scroll_into_view_if_needed()
            self.page.wait_for_timeout(1000)
            search_button.click(force=True)
            self.logger.info("🔍 Search triggered with force click")

            # 📋 Validate results table contains 'testuser'
            results_table = self.page.locator("div.oxd-table-body")
            expect(results_table).to_be_visible(timeout=5000)

            user_row = results_table.locator("div.oxd-table-cell").filter(has_text="testuser")
            if user_row.count() > 0:
                self.logger.info("✅ User 'testuser' found in results table")
            else:
                self.logger.error("❌ User 'testuser' not found in results table")
                capture_screenshot(self.page, "user_not_found_in_table.png")
                raise Exception("User 'testuser' not found in table after search")

        except Exception as e:
            self.logger.error(f"❌ Validation failed: {e}")
            capture_screenshot(self.page, "validate_user_failed.png")
            raise

    def verify_user_in_system_users(self, username, role, employee_name, status):
        self.logger.info(f"🔎 Verifying user '{username}' in System Users page")

        try:
            # Reuse search method
            self.search_user_by_filters(username, role, employee_name, status)

            # Verify result row
            result_row = self.page.locator(f"div.oxd-table-cell:has-text('{username}')")
            if result_row.is_visible():
                self.logger.info(f"✅ User '{username}' found in search results")
                capture_screenshot(self.page, f"user_verified_{username}.png")
            else:
                self.logger.error(f"❌ User '{username}' not found in search results")
                capture_screenshot(self.page, f"user_not_found_{username}.png")
                raise Exception(f"User '{username}' not found after creation")

        except Exception as e:
            self.logger.error(f"🔥 Verification failed: {e}")
            capture_screenshot(self.page, f"verification_error_{username}.png")
            raise


    def logout_user(self):
        self.logger.info("🚪 Logging out")
        self.page.locator("i.oxd-userdropdown-icon").click()
        self.page.locator("a.oxd-userdropdown-link[href='/web/index.php/auth/logout']").click()
        self.page.wait_for_selector("input[name='username']", timeout=5000)
        self.logger.info("✅ Logout successful")